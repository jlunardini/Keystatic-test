import { ao as basicFormFieldWithSimpleReaderParse, ap as FieldDataError, aq as assertRequired, as as NotEditable, aL as focusWithPreviousSelection, a3 as useConfig, a4 as isCloudConfig, aM as getSplitCloudProject } from './index-62e46717.esm.js';
import { NumberField } from '@keystar/ui/number-field';
import { useReducer, useEffect, useState } from 'react';
import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { useSlateStatic, useSelected } from 'slate-react';
import { useOverlayTriggerState } from '@react-stately/overlays';
import { ActionButton, ClearButton, ToggleButton, ButtonGroup, Button } from '@keystar/ui/button';
import { DialogContainer, DialogTrigger, Dialog } from '@keystar/ui/dialog';
import { Icon } from '@keystar/ui/icon';
import { imageIcon } from '@keystar/ui/icon/icons/imageIcon';
import { link2Icon } from '@keystar/ui/icon/icons/link2Icon';
import { link2OffIcon } from '@keystar/ui/icon/icons/link2OffIcon';
import { pencilIcon } from '@keystar/ui/icon/icons/pencilIcon';
import { trash2Icon } from '@keystar/ui/icon/icons/trash2Icon';
import { undo2Icon } from '@keystar/ui/icon/icons/undo2Icon';
import { Flex, VStack, HStack } from '@keystar/ui/layout';
import { TextLink } from '@keystar/ui/link';
import { ProgressCircle } from '@keystar/ui/progress';
import { Content } from '@keystar/ui/slots';
import { TextField, TextArea } from '@keystar/ui/text-field';
import { TooltipTrigger, Tooltip } from '@keystar/ui/tooltip';
import { Text, Heading } from '@keystar/ui/typography';
import { useId } from '@keystar/ui/utils';
import '@keystar/ui/checkbox';
import 'emery';
import '@keystar/ui/field';
import '@keystar/ui/style';
import '@keystar/ui/combobox';
import 'minimatch';
import '@react-stately/collections';
import '@keystar/ui/picker';
import '@sindresorhus/slugify';
import '@braintree/sanitize-url';
import '@react-aria/i18n';
import '@keystar/ui/drag-and-drop';
import '@keystar/ui/list-view';
import '@keystar/ui/menu';

function validateInteger(validation, value, label) {
  if (value !== null && (typeof value !== 'number' || !Number.isFinite(value))) {
    return `${label} is not a valid whole number`;
  }
  if (validation !== null && validation !== void 0 && validation.isRequired && value === null) {
    return `${label} is required`;
  }
  if (value !== null) {
    if ((validation === null || validation === void 0 ? void 0 : validation.min) !== undefined && value < validation.min) {
      return `${label} must be at least ${validation.min}`;
    }
    if ((validation === null || validation === void 0 ? void 0 : validation.max) !== undefined && value > validation.max) {
      return `${label} must be at most ${validation.max}`;
    }
  }
}

function IntegerFieldInput(props) {
  const [blurred, onBlur] = useReducer(() => true, false);
  return /*#__PURE__*/jsx(NumberField, {
    label: props.label,
    description: props.description,
    errorMessage: props.forceValidation || blurred ? validateInteger(props.validation, props.value, props.label) : undefined,
    onBlur: onBlur,
    autoFocus: props.autoFocus,
    value: props.value === null ? undefined : props.value,
    onChange: val => {
      props.onChange(val === undefined ? null : val);
    }
  });
}

function integer({
  label,
  defaultValue,
  validation,
  description
}) {
  return basicFormFieldWithSimpleReaderParse({
    Input(props) {
      return /*#__PURE__*/jsx(IntegerFieldInput, {
        label: label,
        description: description,
        validation: validation,
        ...props
      });
    },
    defaultValue() {
      return defaultValue !== null && defaultValue !== void 0 ? defaultValue : null;
    },
    parse(value) {
      if (value === undefined) {
        return null;
      }
      if (typeof value === 'number') {
        return value;
      }
      throw new FieldDataError('Must be a number');
    },
    validate(value) {
      const message = validateInteger(validation, value, label);
      if (message !== undefined) {
        throw new FieldDataError(message);
      }
      assertRequired(value, validation, label);
      return value;
    },
    serialize(value) {
      return {
        value: value === null ? undefined : value
      };
    }
  });
}

function parseImageData(data) {
  try {
    const parsed = JSON.parse(data);
    if (typeof parsed === 'object' && parsed !== null && 'src' in parsed && typeof parsed.src === 'string') {
      return {
        src: parsed.src,
        alt: 'alt' in parsed && typeof parsed.alt === 'string' ? parsed.alt : '',
        height: 'height' in parsed && typeof parsed.height === 'number' && Number.isInteger(parsed.height) ? parsed.height : undefined,
        width: 'width' in parsed && typeof parsed.width === 'number' && Number.isInteger(parsed.width) ? parsed.width : undefined
      };
    }
  } catch (err) {}
  const pattern = /^\s*!\[(.*)\]\(([a-z0-9_\-/:.]+)\)\s*$/;
  const match = data.match(pattern);
  if (match) {
    return {
      src: match[2],
      alt: match[1]
    };
  }
  return {
    src: data,
    alt: ''
  };
}
const emptyImageData = {
  src: '',
  alt: ''
};
function ImageDialog(props) {
  const {
    image,
    onCancel,
    onChange,
    onClose
  } = props;
  const [state, setState] = useState(image !== null && image !== void 0 ? image : emptyImageData);
  const [status, setStatus] = useState(image ? 'good' : '');
  const [constrainProportions, setConstrainProportions] = useState(true);
  const [dimensions, setDimensions] = useState(emptyImageData);
  const formId = useId();
  const imageLibraryURL = useImageLibraryURL();
  const revertLabel = `Revert to original (${dimensions.width} Ã— ${dimensions.height})`;
  const dimensionsMatchOriginal = dimensions.width === state.width && dimensions.height === state.height;
  const onPaste = event => {
    event.preventDefault();
    const text = event.clipboardData.getData('text/plain');
    setState(parseImageData(text));
  };
  useEffect(() => {
    if (!state.src) {
      setStatus('');
      return;
    }
    if (!isValidURL(state.src)) {
      return;
    }
    setStatus('loading');
    const img = new Image();
    img.onload = () => {
      const dimensions = {
        width: img.width,
        height: img.height
      };
      setState(state => ({
        ...state,
        ...dimensions
      }));
      setDimensions(dimensions);
      setStatus('good');
    };
    img.onerror = () => {
      setStatus('error');
    };
    img.src = state.src;
    return () => {
      img.onload = null;
    };
  }, [state.src]);
  return /*#__PURE__*/jsxs(Dialog, {
    children: [/*#__PURE__*/jsx(Heading, {
      children: "Cloud image"
    }), /*#__PURE__*/jsx(Content, {
      children: /*#__PURE__*/jsxs(VStack, {
        elementType: "form",
        id: formId,
        gap: "xlarge",
        onSubmit: e => {
          e.preventDefault();
          if (status !== 'good') return;
          onChange(state);
          onClose();
        },
        children: [/*#__PURE__*/jsx(TextField, {
          label: "Image URL",
          autoFocus: true,
          onPaste: onPaste,
          onKeyDown: e => {
            if (e.code === 'Backspace' || e.code === 'Delete') {
              setState(emptyImageData);
            } else {
              e.continuePropagation();
            }
          },
          value: state.src,
          description: /*#__PURE__*/jsxs(Text, {
            children: ["Copy an image URL from the", ' ', /*#__PURE__*/jsx(TextLink, {
              prominence: "high",
              href: imageLibraryURL,
              target: "_blank",
              rel: "noreferrer",
              children: "Image Library"
            }), ' ', "and paste it into this field."]
          }),
          endElement: status === 'loading' ? /*#__PURE__*/jsx(Flex, {
            height: "element.regular",
            width: "element.regular",
            alignItems: "center",
            justifyContent: "center",
            children: /*#__PURE__*/jsx(ProgressCircle, {
              size: "small",
              "aria-label": "Checking\u2026",
              isIndeterminate: true
            })
          }) : state.src ? /*#__PURE__*/jsx(ClearButton, {
            onPress: () => setState(emptyImageData),
            preventFocus: true
          }) : null
        }), status === 'good' ? /*#__PURE__*/jsxs(Fragment, {
          children: [/*#__PURE__*/jsx(TextArea, {
            label: "Alt text",
            value: state.alt,
            onChange: alt => setState(state => ({
              ...state,
              alt
            }))
          }), /*#__PURE__*/jsxs(HStack, {
            gap: "regular",
            alignItems: "end",
            children: [/*#__PURE__*/jsx(NumberField, {
              label: "Width",
              width: "scale.1600",
              formatOptions: {
                maximumFractionDigits: 0
              },
              value: state.width,
              onChange: width => {
                if (constrainProportions) {
                  setState(state => ({
                    ...state,
                    width,
                    height: Math.round(width / getAspectRatio(state))
                  }));
                } else {
                  setState(state => ({
                    ...state,
                    width
                  }));
                }
              }
            }), /*#__PURE__*/jsxs(TooltipTrigger, {
              children: [/*#__PURE__*/jsx(ToggleButton, {
                isSelected: constrainProportions,
                "aria-label": "Constrain proportions",
                prominence: "low",
                onPress: () => {
                  setConstrainProportions(state => !state);
                },
                children: /*#__PURE__*/jsx(Icon, {
                  src: constrainProportions ? link2Icon : link2OffIcon
                })
              }), /*#__PURE__*/jsx(Tooltip, {
                children: "Constrain proportions"
              })]
            }), /*#__PURE__*/jsx(NumberField, {
              label: "Height",
              width: "scale.1600",
              formatOptions: {
                maximumFractionDigits: 0
              },
              value: state.height,
              onChange: height => {
                if (constrainProportions) {
                  setState(state => ({
                    ...state,
                    height,
                    width: Math.round(height * getAspectRatio(state))
                  }));
                } else {
                  setState(state => ({
                    ...state,
                    height
                  }));
                }
              }
            }), /*#__PURE__*/jsxs(TooltipTrigger, {
              children: [/*#__PURE__*/jsx(ActionButton, {
                "aria-label": revertLabel,
                isDisabled: dimensionsMatchOriginal,
                onPress: () => {
                  setState(state => ({
                    ...state,
                    height: dimensions.height,
                    width: dimensions.width
                  }));
                },
                children: /*#__PURE__*/jsx(Icon, {
                  src: undo2Icon
                })
              }), /*#__PURE__*/jsx(Tooltip, {
                maxWidth: "100%",
                children: revertLabel
              })]
            })]
          })]
        }) : null]
      })
    }), /*#__PURE__*/jsxs(ButtonGroup, {
      children: [/*#__PURE__*/jsx(Button, {
        onPress: onCancel,
        children: "Cancel"
      }), /*#__PURE__*/jsx(Button, {
        prominence: "high",
        type: "submit",
        form: formId,
        isDisabled: status !== 'good',
        children: image ? 'Done' : 'Insert'
      })]
    })]
  });
}
function Placeholder(props) {
  const editor = useSlateStatic();
  const selected = useSelected();
  const state = useOverlayTriggerState({
    defaultOpen: false
  });
  useEffect(() => {
    if (selected) {
      state.open();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selected]);
  const closeAndCleanup = () => {
    state.close();
    focusWithPreviousSelection(editor);
    props.onRemove();
  };
  return /*#__PURE__*/jsxs(NotEditable, {
    children: [/*#__PURE__*/jsxs(Flex, {
      alignItems: "center",
      backgroundColor: "surface",
      borderRadius: "regular",
      gap: "regular",
      height: "element.large",
      paddingX: "large",
      onClick: () => state.open(),
      children: [/*#__PURE__*/jsx(Icon, {
        src: imageIcon
      }), /*#__PURE__*/jsxs(Text, {
        children: ["Cloud image", state.isOpen ? '' : '(click to configure)']
      })]
    }), /*#__PURE__*/jsx(DialogContainer, {
      onDismiss: closeAndCleanup,
      children: state.isOpen && /*#__PURE__*/jsx(ImageDialog, {
        onChange: props.onChange,
        onCancel: closeAndCleanup,
        onClose: state.close
      })
    })]
  });
}
function ImagePreview({
  image,
  onChange,
  onRemove
}) {
  const selected = useSelected();
  const maxHeight = 368; // size.scale.4600 â€” TODO: it'd be nice to get this from some token artefact
  const maxWidth = 734; // roughly the max width that an editor container will allow

  return /*#__PURE__*/jsx(Fragment, {
    children: /*#__PURE__*/jsx(NotEditable, {
      children: /*#__PURE__*/jsxs(VStack, {
        backgroundColor: selected ? 'accent' : 'surface',
        borderRadius: "medium",
        border: selected ? 'color.alias.borderFocused' : 'neutral',
        overflow: "hidden",
        children: [/*#__PURE__*/jsx(Flex, {
          backgroundColor: "canvas",
          justifyContent: "center",
          UNSAFE_style: {
            maxHeight
          },
          children: /*#__PURE__*/jsx("img", {
            alt: image.alt,
            src: imageWithTransforms({
              source: image.src,
              // 2x for retina etc.
              height: maxHeight * 2,
              width: maxWidth * 2
            }),
            style: {
              objectFit: 'contain'
            }
          })
        }), /*#__PURE__*/jsxs(HStack, {
          padding: "large",
          gap: "xlarge",
          borderTop: selected ? 'color.alias.borderFocused' : 'neutral',
          children: [/*#__PURE__*/jsxs(VStack, {
            flex: "1",
            gap: "medium",
            justifyContent: "center",
            children: [image.alt ? /*#__PURE__*/jsx(Text, {
              truncate: 2,
              children: image.alt
            }) : null, /*#__PURE__*/jsxs(Text, {
              color: "neutralTertiary",
              size: "small",
              children: [image.width, " \xD7 ", image.height]
            })]
          }), /*#__PURE__*/jsxs(HStack, {
            gap: "regular",
            children: [/*#__PURE__*/jsxs(DialogTrigger, {
              children: [/*#__PURE__*/jsxs(TooltipTrigger, {
                children: [/*#__PURE__*/jsx(ActionButton, {
                  children: /*#__PURE__*/jsx(Icon, {
                    src: pencilIcon
                  })
                }), /*#__PURE__*/jsx(Tooltip, {
                  children: "Edit Image Options"
                })]
              }), onClose => /*#__PURE__*/jsx(ImageDialog, {
                image: image,
                onChange: onChange,
                onCancel: onClose,
                onClose: onClose
              })]
            }), /*#__PURE__*/jsxs(TooltipTrigger, {
              children: [/*#__PURE__*/jsx(ActionButton, {
                onPress: onRemove,
                children: /*#__PURE__*/jsx(Icon, {
                  src: trash2Icon
                })
              }), /*#__PURE__*/jsx(Tooltip, {
                children: "Remove Image"
              })]
            })]
          })]
        })]
      })
    })
  });
}
function CloudImagePreview(props) {
  var _props$fields$width$v, _props$fields$height$;
  if (!props.fields.src.value) {
    return /*#__PURE__*/jsx(Placeholder, {
      onChange: props.onChange,
      onRemove: props.onRemove
    });
  }
  return /*#__PURE__*/jsx(ImagePreview, {
    image: {
      src: props.fields.src.value,
      alt: props.fields.alt.value,
      width: (_props$fields$width$v = props.fields.width.value) !== null && _props$fields$width$v !== void 0 ? _props$fields$width$v : undefined,
      height: (_props$fields$height$ = props.fields.height.value) !== null && _props$fields$height$ !== void 0 ? _props$fields$height$ : undefined
    },
    onChange: props.onChange,
    onRemove: props.onRemove
  });
}

// Utils
// -----------------------------------------------------------------------------
function imageWithTransforms(options) {
  let {
    fit = 'scale-down',
    source,
    height,
    width
  } = options;
  if (!/^https?:\/\/[^\.]+\.keystatic\.net/.test(source)) {
    return source;
  }
  return `${source}?` + new URLSearchParams({
    fit,
    height: height.toString(),
    width: width.toString()
  }).toString();
}
function isValidURL(str) {
  try {
    new URL(str);
    return true;
  } catch {
    return false;
  }
}
function useImageLibraryURL() {
  const config = useConfig();
  if (!isCloudConfig(config)) return 'https://keystatic.cloud/';
  const {
    project,
    team
  } = getSplitCloudProject(config);
  return `https://keystatic.cloud/teams/${team}/project/${project}/images`;
}
function getAspectRatio(state) {
  if (!state.width || !state.height) return 1;
  return state.width / state.height;
}

// this is written like this rather than ArrayField<ComponentSchema> to avoid TypeScript erroring about circularity
function component(options) {
  return options;
}

export { CloudImagePreview as C, component as c, emptyImageData as e, integer as i, parseImageData as p, useImageLibraryURL as u };
