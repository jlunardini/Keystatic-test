{"version":3,"file":"urql-exchange-persisted.js","sources":["../src/sha256.ts","../src/persistedExchange.ts"],"sourcesContent":["const webCrypto = (\n  typeof window !== 'undefined'\n    ? window.crypto\n    : typeof self !== 'undefined'\n    ? self.crypto\n    : null\n) as typeof globalThis.crypto | null;\n\nlet nodeCrypto: Promise<typeof import('crypto') | void> | void;\n\nconst getNodeCrypto = async (): Promise<typeof import('crypto') | void> => {\n  if (!nodeCrypto) {\n    // Indirect eval'd require/import to guarantee no side-effects in module scope\n    // (optimization for minifiers)\n    try {\n      nodeCrypto = new Function('require', 'return require(\"crypto\")')(require);\n    } catch (_error) {\n      try {\n        nodeCrypto = new Function('return import(\"crypto\")')();\n      } catch (_error) {}\n    }\n  }\n  return nodeCrypto;\n};\n\nexport const hash = async (query: string): Promise<string> => {\n  if (webCrypto && webCrypto.subtle) {\n    const digest = await webCrypto.subtle.digest(\n      { name: 'SHA-256' },\n      new TextEncoder().encode(query)\n    );\n    return new Uint8Array(digest).reduce(\n      (prev, byte) => prev + byte.toString(16).padStart(2, '0'),\n      ''\n    );\n  } else if (await getNodeCrypto()) {\n    // Node.js support\n    return (await nodeCrypto)!.createHash('sha256').update(query).digest('hex');\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    console.warn(\n      '[@urql/exchange-persisted-fetch]: The Node Crypto and Web Crypto APIs are not available.\\n' +\n        'This is an unexpected error. Please report it by filing a GitHub Issue.'\n    );\n  }\n\n  return '';\n};\n","import {\n  map,\n  makeSubject,\n  fromPromise,\n  filter,\n  merge,\n  mergeMap,\n  pipe,\n} from 'wonka';\n\nimport {\n  makeOperation,\n  stringifyDocument,\n  PersistedRequestExtensions,\n  TypedDocumentNode,\n  OperationResult,\n  CombinedError,\n  Exchange,\n  Operation,\n} from '@urql/core';\n\nimport { hash } from './sha256';\n\nconst isPersistedMiss = (error: CombinedError): boolean =>\n  error.graphQLErrors.some(x => x.message === 'PersistedQueryNotFound');\n\nconst isPersistedUnsupported = (error: CombinedError): boolean =>\n  error.graphQLErrors.some(x => x.message === 'PersistedQueryNotSupported');\n\n/** Input parameters for the {@link persistedExchange}. */\nexport interface PersistedExchangeOptions {\n  /** Enforces GET method requests to be made for Persisted Queries.\n   *\n   * @remarks\n   * When enabled, the `persistedExchange` will set\n   * `OperationContext.preferGetMethod` to `'force'` on persisted queries,\n   * which will force requests to be made using a GET request.\n   *\n   * This is frequently used to make GraphQL requests more cacheable\n   * on CDNs.\n   *\n   * @defaultValue `true` - enabled\n   */\n  preferGetForPersistedQueries?: boolean;\n  /** Enforces non-automatic persisted queries by ignoring APQ errors.\n   *\n   * @remarks\n   * When enabled, the `persistedExchange` will ignore `PersistedQueryNotFound`\n   * and `PersistedQueryNotSupported` errors and assume that all persisted\n   * queries are already known to the API.\n   *\n   * This is used to switch from Automatic Persisted Queries to\n   * Persisted Queries. This is commonly used to obfuscate GraphQL\n   * APIs.\n   */\n  enforcePersistedQueries?: boolean;\n  /** Custom hashing function for persisted queries.\n   *\n   * @remarks\n   * By default, `persistedExchange` will create a SHA-256 hash for\n   * persisted queries automatically. If you're instead generating\n   * hashes at compile-time, or need to use a custom SHA-256 function,\n   * you may pass one here.\n   *\n   * Hint: The default SHA-256 function uses the WebCrypto API. This\n   * API is unavailable on React Native, which may require you to\n   * pass a custom function here.\n   */\n  generateHash?(\n    query: string,\n    document: TypedDocumentNode<any, any>\n  ): Promise<string>;\n  /** Enables persisted queries to be used for mutations.\n   *\n   * @remarks\n   * When enabled, the `persistedExchange` will also use the persisted queries\n   * logic for mutation operations.\n   *\n   * This is disabled by default, but often used on APIs that obfuscate\n   * their GraphQL APIs.\n   */\n  enableForMutation?: boolean;\n}\n\n/** Exchange factory that adds support for Persisted Queries.\n *\n * @param options - A {@link PersistedExchangeOptions} configuration object.\n * @returns the created persisted queries {@link Exchange}.\n *\n * @remarks\n * The `persistedExchange` adds support for (Automatic) Persisted Queries\n * to any `fetchExchange`, `subscriptionExchange`, or other API exchanges\n * following it.\n *\n * It does so by adding the `persistedQuery` extensions field to GraphQL\n * requests and handles `PersistedQueryNotFound` and\n * `PersistedQueryNotSupported` errors.\n *\n * @example\n * ```ts\n * import { Client, cacheExchange, fetchExchange } from '@urql/core';\n * import { persistedExchange } from '@urql/exchange-persisted';\n *\n * const client = new Client({\n *   url: 'URL',\n *   exchanges: [\n *     cacheExchange,\n *     persistedExchange({\n *       preferGetForPersistedQueries: true,\n *     }),\n *     fetchExchange\n *   ],\n * });\n * ```\n */\nexport const persistedExchange =\n  (options?: PersistedExchangeOptions): Exchange =>\n  ({ forward }) => {\n    if (!options) options = {};\n\n    const preferGetForPersistedQueries = !!options.preferGetForPersistedQueries;\n    const enforcePersistedQueries = !!options.enforcePersistedQueries;\n    const hashFn = options.generateHash || hash;\n    const enableForMutation = !!options.enableForMutation;\n    let supportsPersistedQueries = true;\n\n    const operationFilter = (operation: Operation) =>\n      supportsPersistedQueries &&\n      !operation.context.persistAttempt &&\n      ((enableForMutation && operation.kind === 'mutation') ||\n        operation.kind === 'query');\n\n    return operations$ => {\n      const retries = makeSubject<Operation>();\n\n      const forwardedOps$ = pipe(\n        operations$,\n        filter(operation => !operationFilter(operation))\n      );\n\n      const persistedOps$ = pipe(\n        operations$,\n        filter(operationFilter),\n        map(async operation => {\n          const persistedOperation = makeOperation(operation.kind, operation, {\n            ...operation.context,\n            persistAttempt: true,\n          });\n\n          const sha256Hash = await hashFn(\n            stringifyDocument(operation.query),\n            operation.query\n          );\n          if (sha256Hash) {\n            persistedOperation.extensions = {\n              ...persistedOperation.extensions,\n              persistedQuery: {\n                version: 1,\n                sha256Hash,\n              },\n            };\n            if (\n              persistedOperation.kind === 'query' &&\n              preferGetForPersistedQueries\n            ) {\n              persistedOperation.context.preferGetMethod = 'force';\n            }\n          }\n\n          return persistedOperation;\n        }),\n        mergeMap(fromPromise)\n      );\n\n      return pipe(\n        merge([persistedOps$, forwardedOps$, retries.source]),\n        forward,\n        map(result => {\n          if (\n            !enforcePersistedQueries &&\n            result.operation.extensions &&\n            result.operation.extensions.persistedQuery\n          ) {\n            if (result.error && isPersistedUnsupported(result.error)) {\n              // Disable future persisted queries if they're not enforced\n              supportsPersistedQueries = false;\n              // Update operation with unsupported attempt\n              const followupOperation = makeOperation(\n                result.operation.kind,\n                result.operation\n              );\n              if (followupOperation.extensions)\n                delete followupOperation.extensions.persistedQuery;\n              retries.next(followupOperation);\n              return null;\n            } else if (result.error && isPersistedMiss(result.error)) {\n              // Update operation with unsupported attempt\n              const followupOperation = makeOperation(\n                result.operation.kind,\n                result.operation\n              );\n              // Mark as missed persisted query\n              followupOperation.extensions = {\n                ...followupOperation.extensions,\n                persistedQuery: {\n                  ...(followupOperation.extensions || {}).persistedQuery,\n                  miss: true,\n                } as PersistedRequestExtensions,\n              };\n              retries.next(followupOperation);\n              return null;\n            }\n          }\n          return result;\n        }),\n        filter((result): result is OperationResult => !!result)\n      );\n    };\n  };\n"],"names":["webCrypto","window","crypto","self","nodeCrypto","getNodeCrypto","Function","require","_error","hash","query","subtle","digest","name","TextEncoder","encode","Uint8Array","reduce","prev","byte","toString","padStart","createHash","update","process","env","NODE_ENV","console","warn","isPersistedMiss","error","graphQLErrors","some","x","message","isPersistedUnsupported","persistedExchange","options","forward","preferGetForPersistedQueries","enforcePersistedQueries","hashFn","generateHash","enableForMutation","supportsPersistedQueries","operationFilter","operation","context","persistAttempt","kind","operations$","retries","makeSubject","forwardedOps$","filter","persistedOps$","mergeMap","fromPromise","map","persistedOperation","makeOperation","sha256Hash","stringifyDocument","extensions","persistedQuery","version","preferGetMethod","result","followupOperation","next","miss","merge","source"],"mappings":"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"}