import{makeSubject as e,filter as r,mergeMap as t,fromPromise as n,map as s,merge as o}from"wonka";import{makeOperation as i,stringifyDocument as a}from"@urql/core";var u,d="undefined"!=typeof window?window.crypto:"undefined"!=typeof self?self.crypto:null,p=async e=>{if(d&&d.subtle){var r=await d.subtle.digest({name:"SHA-256"},(new TextEncoder).encode(e));return new Uint8Array(r).reduce(((e,r)=>e+r.toString(16).padStart(2,"0")),"")}return await(async()=>{if(!u)try{u=new Function("require",'return require("crypto")')(require)}catch(e){try{u=new Function('return import("crypto")')()}catch(e){}}return u})()?(await u).createHash("sha256").update(e).digest("hex"):""},c=u=>({forward:d})=>{u||(u={});var c=!!u.preferGetForPersistedQueries,y=!!u.enforcePersistedQueries,f=u.generateHash||p,x=!!u.enableForMutation,m=!0,w=e=>m&&!e.context.persistAttempt&&(x&&"mutation"===e.kind||"query"===e.kind);return u=>{var p=e(),x=r((e=>!w(e)))(u),l=t(n)(s((async e=>{var r=i(e.kind,e,{...e.context,persistAttempt:!0}),t=await f(a(e.query),e.query);return t&&(r.extensions={...r.extensions,persistedQuery:{version:1,sha256Hash:t}},"query"===r.kind&&c&&(r.context.preferGetMethod="force")),r}))(r(w)(u)));return r((e=>!!e))(s((e=>{if(!y&&e.operation.extensions&&e.operation.extensions.persistedQuery){if(e.error&&e.error.graphQLErrors.some((e=>"PersistedQueryNotSupported"===e.message))){m=!1;var r=i(e.operation.kind,e.operation);return r.extensions&&delete r.extensions.persistedQuery,p.next(r),null}if(e.error&&e.error.graphQLErrors.some((e=>"PersistedQueryNotFound"===e.message))){var t=i(e.operation.kind,e.operation);return t.extensions={...t.extensions,persistedQuery:{...(t.extensions||{}).persistedQuery,miss:!0}},p.next(t),null}}return e}))(d(o([l,x,p.source]))))}};export{c as persistedExchange};
//# sourceMappingURL=urql-exchange-persisted.min.mjs.map
